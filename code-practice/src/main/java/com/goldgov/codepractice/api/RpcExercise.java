/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.goldgov.codepractice.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-19")
public class RpcExercise implements org.apache.thrift.TBase<RpcExercise, RpcExercise._Fields>, java.io.Serializable, Cloneable, Comparable<RpcExercise> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RpcExercise");

  private static final org.apache.thrift.protocol.TField EXERCISE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exerciseID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEFINITION_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("definitionClass", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DEFINITION_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("definitionMethod", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DEFINITION_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("definitionParams", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DEFINITION_RETURN_FIELD_DESC = new org.apache.thrift.protocol.TField("definitionReturn", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CONSTRAINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("constraints", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EXAMPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("example", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField DIFFICULTY_FIELD_DESC = new org.apache.thrift.protocol.TField("difficulty", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TIME_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeLimit", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PUBLISH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("publishDate", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField SCORE_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("scorePoint", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("note", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RpcExerciseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RpcExerciseTupleSchemeFactory();

  private int exerciseID; // required
  private java.lang.String title; // required
  private java.lang.String statement; // required
  private java.lang.String definitionClass; // required
  private java.lang.String definitionMethod; // required
  private java.lang.String definitionParams; // required
  private java.lang.String definitionReturn; // required
  private java.lang.String constraints; // required
  private java.lang.String example; // required
  private int category; // required
  private int difficulty; // required
  private int timeLimit; // required
  private long publishDate; // required
  private int scorePoint; // required
  private java.lang.String note; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXERCISE_ID((short)1, "exerciseID"),
    TITLE((short)2, "title"),
    STATEMENT((short)3, "statement"),
    DEFINITION_CLASS((short)4, "definitionClass"),
    DEFINITION_METHOD((short)5, "definitionMethod"),
    DEFINITION_PARAMS((short)6, "definitionParams"),
    DEFINITION_RETURN((short)7, "definitionReturn"),
    CONSTRAINTS((short)8, "constraints"),
    EXAMPLE((short)9, "example"),
    CATEGORY((short)10, "category"),
    DIFFICULTY((short)11, "difficulty"),
    TIME_LIMIT((short)12, "timeLimit"),
    PUBLISH_DATE((short)13, "publishDate"),
    SCORE_POINT((short)14, "scorePoint"),
    NOTE((short)15, "note");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXERCISE_ID
          return EXERCISE_ID;
        case 2: // TITLE
          return TITLE;
        case 3: // STATEMENT
          return STATEMENT;
        case 4: // DEFINITION_CLASS
          return DEFINITION_CLASS;
        case 5: // DEFINITION_METHOD
          return DEFINITION_METHOD;
        case 6: // DEFINITION_PARAMS
          return DEFINITION_PARAMS;
        case 7: // DEFINITION_RETURN
          return DEFINITION_RETURN;
        case 8: // CONSTRAINTS
          return CONSTRAINTS;
        case 9: // EXAMPLE
          return EXAMPLE;
        case 10: // CATEGORY
          return CATEGORY;
        case 11: // DIFFICULTY
          return DIFFICULTY;
        case 12: // TIME_LIMIT
          return TIME_LIMIT;
        case 13: // PUBLISH_DATE
          return PUBLISH_DATE;
        case 14: // SCORE_POINT
          return SCORE_POINT;
        case 15: // NOTE
          return NOTE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXERCISEID_ISSET_ID = 0;
  private static final int __CATEGORY_ISSET_ID = 1;
  private static final int __DIFFICULTY_ISSET_ID = 2;
  private static final int __TIMELIMIT_ISSET_ID = 3;
  private static final int __PUBLISHDATE_ISSET_ID = 4;
  private static final int __SCOREPOINT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXERCISE_ID, new org.apache.thrift.meta_data.FieldMetaData("exerciseID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFINITION_CLASS, new org.apache.thrift.meta_data.FieldMetaData("definitionClass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFINITION_METHOD, new org.apache.thrift.meta_data.FieldMetaData("definitionMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFINITION_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("definitionParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFINITION_RETURN, new org.apache.thrift.meta_data.FieldMetaData("definitionReturn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSTRAINTS, new org.apache.thrift.meta_data.FieldMetaData("constraints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXAMPLE, new org.apache.thrift.meta_data.FieldMetaData("example", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIFFICULTY, new org.apache.thrift.meta_data.FieldMetaData("difficulty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("timeLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLISH_DATE, new org.apache.thrift.meta_data.FieldMetaData("publishDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCORE_POINT, new org.apache.thrift.meta_data.FieldMetaData("scorePoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RpcExercise.class, metaDataMap);
  }

  public RpcExercise() {
  }

  public RpcExercise(
    int exerciseID,
    java.lang.String title,
    java.lang.String statement,
    java.lang.String definitionClass,
    java.lang.String definitionMethod,
    java.lang.String definitionParams,
    java.lang.String definitionReturn,
    java.lang.String constraints,
    java.lang.String example,
    int category,
    int difficulty,
    int timeLimit,
    long publishDate,
    int scorePoint,
    java.lang.String note)
  {
    this();
    this.exerciseID = exerciseID;
    setExerciseIDIsSet(true);
    this.title = title;
    this.statement = statement;
    this.definitionClass = definitionClass;
    this.definitionMethod = definitionMethod;
    this.definitionParams = definitionParams;
    this.definitionReturn = definitionReturn;
    this.constraints = constraints;
    this.example = example;
    this.category = category;
    setCategoryIsSet(true);
    this.difficulty = difficulty;
    setDifficultyIsSet(true);
    this.timeLimit = timeLimit;
    setTimeLimitIsSet(true);
    this.publishDate = publishDate;
    setPublishDateIsSet(true);
    this.scorePoint = scorePoint;
    setScorePointIsSet(true);
    this.note = note;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RpcExercise(RpcExercise other) {
    __isset_bitfield = other.__isset_bitfield;
    this.exerciseID = other.exerciseID;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetStatement()) {
      this.statement = other.statement;
    }
    if (other.isSetDefinitionClass()) {
      this.definitionClass = other.definitionClass;
    }
    if (other.isSetDefinitionMethod()) {
      this.definitionMethod = other.definitionMethod;
    }
    if (other.isSetDefinitionParams()) {
      this.definitionParams = other.definitionParams;
    }
    if (other.isSetDefinitionReturn()) {
      this.definitionReturn = other.definitionReturn;
    }
    if (other.isSetConstraints()) {
      this.constraints = other.constraints;
    }
    if (other.isSetExample()) {
      this.example = other.example;
    }
    this.category = other.category;
    this.difficulty = other.difficulty;
    this.timeLimit = other.timeLimit;
    this.publishDate = other.publishDate;
    this.scorePoint = other.scorePoint;
    if (other.isSetNote()) {
      this.note = other.note;
    }
  }

  public RpcExercise deepCopy() {
    return new RpcExercise(this);
  }

  @Override
  public void clear() {
    setExerciseIDIsSet(false);
    this.exerciseID = 0;
    this.title = null;
    this.statement = null;
    this.definitionClass = null;
    this.definitionMethod = null;
    this.definitionParams = null;
    this.definitionReturn = null;
    this.constraints = null;
    this.example = null;
    setCategoryIsSet(false);
    this.category = 0;
    setDifficultyIsSet(false);
    this.difficulty = 0;
    setTimeLimitIsSet(false);
    this.timeLimit = 0;
    setPublishDateIsSet(false);
    this.publishDate = 0;
    setScorePointIsSet(false);
    this.scorePoint = 0;
    this.note = null;
  }

  public int getExerciseID() {
    return this.exerciseID;
  }

  public void setExerciseID(int exerciseID) {
    this.exerciseID = exerciseID;
    setExerciseIDIsSet(true);
  }

  public void unsetExerciseID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXERCISEID_ISSET_ID);
  }

  /** Returns true if field exerciseID is set (has been assigned a value) and false otherwise */
  public boolean isSetExerciseID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXERCISEID_ISSET_ID);
  }

  public void setExerciseIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXERCISEID_ISSET_ID, value);
  }

  public java.lang.String getTitle() {
    return this.title;
  }

  public void setTitle(java.lang.String title) {
    this.title = title;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public java.lang.String getStatement() {
    return this.statement;
  }

  public void setStatement(java.lang.String statement) {
    this.statement = statement;
  }

  public void unsetStatement() {
    this.statement = null;
  }

  /** Returns true if field statement is set (has been assigned a value) and false otherwise */
  public boolean isSetStatement() {
    return this.statement != null;
  }

  public void setStatementIsSet(boolean value) {
    if (!value) {
      this.statement = null;
    }
  }

  public java.lang.String getDefinitionClass() {
    return this.definitionClass;
  }

  public void setDefinitionClass(java.lang.String definitionClass) {
    this.definitionClass = definitionClass;
  }

  public void unsetDefinitionClass() {
    this.definitionClass = null;
  }

  /** Returns true if field definitionClass is set (has been assigned a value) and false otherwise */
  public boolean isSetDefinitionClass() {
    return this.definitionClass != null;
  }

  public void setDefinitionClassIsSet(boolean value) {
    if (!value) {
      this.definitionClass = null;
    }
  }

  public java.lang.String getDefinitionMethod() {
    return this.definitionMethod;
  }

  public void setDefinitionMethod(java.lang.String definitionMethod) {
    this.definitionMethod = definitionMethod;
  }

  public void unsetDefinitionMethod() {
    this.definitionMethod = null;
  }

  /** Returns true if field definitionMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetDefinitionMethod() {
    return this.definitionMethod != null;
  }

  public void setDefinitionMethodIsSet(boolean value) {
    if (!value) {
      this.definitionMethod = null;
    }
  }

  public java.lang.String getDefinitionParams() {
    return this.definitionParams;
  }

  public void setDefinitionParams(java.lang.String definitionParams) {
    this.definitionParams = definitionParams;
  }

  public void unsetDefinitionParams() {
    this.definitionParams = null;
  }

  /** Returns true if field definitionParams is set (has been assigned a value) and false otherwise */
  public boolean isSetDefinitionParams() {
    return this.definitionParams != null;
  }

  public void setDefinitionParamsIsSet(boolean value) {
    if (!value) {
      this.definitionParams = null;
    }
  }

  public java.lang.String getDefinitionReturn() {
    return this.definitionReturn;
  }

  public void setDefinitionReturn(java.lang.String definitionReturn) {
    this.definitionReturn = definitionReturn;
  }

  public void unsetDefinitionReturn() {
    this.definitionReturn = null;
  }

  /** Returns true if field definitionReturn is set (has been assigned a value) and false otherwise */
  public boolean isSetDefinitionReturn() {
    return this.definitionReturn != null;
  }

  public void setDefinitionReturnIsSet(boolean value) {
    if (!value) {
      this.definitionReturn = null;
    }
  }

  public java.lang.String getConstraints() {
    return this.constraints;
  }

  public void setConstraints(java.lang.String constraints) {
    this.constraints = constraints;
  }

  public void unsetConstraints() {
    this.constraints = null;
  }

  /** Returns true if field constraints is set (has been assigned a value) and false otherwise */
  public boolean isSetConstraints() {
    return this.constraints != null;
  }

  public void setConstraintsIsSet(boolean value) {
    if (!value) {
      this.constraints = null;
    }
  }

  public java.lang.String getExample() {
    return this.example;
  }

  public void setExample(java.lang.String example) {
    this.example = example;
  }

  public void unsetExample() {
    this.example = null;
  }

  /** Returns true if field example is set (has been assigned a value) and false otherwise */
  public boolean isSetExample() {
    return this.example != null;
  }

  public void setExampleIsSet(boolean value) {
    if (!value) {
      this.example = null;
    }
  }

  public int getCategory() {
    return this.category;
  }

  public void setCategory(int category) {
    this.category = category;
    setCategoryIsSet(true);
  }

  public void unsetCategory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CATEGORY_ISSET_ID);
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CATEGORY_ISSET_ID);
  }

  public void setCategoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CATEGORY_ISSET_ID, value);
  }

  public int getDifficulty() {
    return this.difficulty;
  }

  public void setDifficulty(int difficulty) {
    this.difficulty = difficulty;
    setDifficultyIsSet(true);
  }

  public void unsetDifficulty() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DIFFICULTY_ISSET_ID);
  }

  /** Returns true if field difficulty is set (has been assigned a value) and false otherwise */
  public boolean isSetDifficulty() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DIFFICULTY_ISSET_ID);
  }

  public void setDifficultyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DIFFICULTY_ISSET_ID, value);
  }

  public int getTimeLimit() {
    return this.timeLimit;
  }

  public void setTimeLimit(int timeLimit) {
    this.timeLimit = timeLimit;
    setTimeLimitIsSet(true);
  }

  public void unsetTimeLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMELIMIT_ISSET_ID);
  }

  /** Returns true if field timeLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMELIMIT_ISSET_ID);
  }

  public void setTimeLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMELIMIT_ISSET_ID, value);
  }

  public long getPublishDate() {
    return this.publishDate;
  }

  public void setPublishDate(long publishDate) {
    this.publishDate = publishDate;
    setPublishDateIsSet(true);
  }

  public void unsetPublishDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PUBLISHDATE_ISSET_ID);
  }

  /** Returns true if field publishDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PUBLISHDATE_ISSET_ID);
  }

  public void setPublishDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PUBLISHDATE_ISSET_ID, value);
  }

  public int getScorePoint() {
    return this.scorePoint;
  }

  public void setScorePoint(int scorePoint) {
    this.scorePoint = scorePoint;
    setScorePointIsSet(true);
  }

  public void unsetScorePoint() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCOREPOINT_ISSET_ID);
  }

  /** Returns true if field scorePoint is set (has been assigned a value) and false otherwise */
  public boolean isSetScorePoint() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCOREPOINT_ISSET_ID);
  }

  public void setScorePointIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCOREPOINT_ISSET_ID, value);
  }

  public java.lang.String getNote() {
    return this.note;
  }

  public void setNote(java.lang.String note) {
    this.note = note;
  }

  public void unsetNote() {
    this.note = null;
  }

  /** Returns true if field note is set (has been assigned a value) and false otherwise */
  public boolean isSetNote() {
    return this.note != null;
  }

  public void setNoteIsSet(boolean value) {
    if (!value) {
      this.note = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case EXERCISE_ID:
      if (value == null) {
        unsetExerciseID();
      } else {
        setExerciseID((java.lang.Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case STATEMENT:
      if (value == null) {
        unsetStatement();
      } else {
        setStatement((java.lang.String)value);
      }
      break;

    case DEFINITION_CLASS:
      if (value == null) {
        unsetDefinitionClass();
      } else {
        setDefinitionClass((java.lang.String)value);
      }
      break;

    case DEFINITION_METHOD:
      if (value == null) {
        unsetDefinitionMethod();
      } else {
        setDefinitionMethod((java.lang.String)value);
      }
      break;

    case DEFINITION_PARAMS:
      if (value == null) {
        unsetDefinitionParams();
      } else {
        setDefinitionParams((java.lang.String)value);
      }
      break;

    case DEFINITION_RETURN:
      if (value == null) {
        unsetDefinitionReturn();
      } else {
        setDefinitionReturn((java.lang.String)value);
      }
      break;

    case CONSTRAINTS:
      if (value == null) {
        unsetConstraints();
      } else {
        setConstraints((java.lang.String)value);
      }
      break;

    case EXAMPLE:
      if (value == null) {
        unsetExample();
      } else {
        setExample((java.lang.String)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((java.lang.Integer)value);
      }
      break;

    case DIFFICULTY:
      if (value == null) {
        unsetDifficulty();
      } else {
        setDifficulty((java.lang.Integer)value);
      }
      break;

    case TIME_LIMIT:
      if (value == null) {
        unsetTimeLimit();
      } else {
        setTimeLimit((java.lang.Integer)value);
      }
      break;

    case PUBLISH_DATE:
      if (value == null) {
        unsetPublishDate();
      } else {
        setPublishDate((java.lang.Long)value);
      }
      break;

    case SCORE_POINT:
      if (value == null) {
        unsetScorePoint();
      } else {
        setScorePoint((java.lang.Integer)value);
      }
      break;

    case NOTE:
      if (value == null) {
        unsetNote();
      } else {
        setNote((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case EXERCISE_ID:
      return getExerciseID();

    case TITLE:
      return getTitle();

    case STATEMENT:
      return getStatement();

    case DEFINITION_CLASS:
      return getDefinitionClass();

    case DEFINITION_METHOD:
      return getDefinitionMethod();

    case DEFINITION_PARAMS:
      return getDefinitionParams();

    case DEFINITION_RETURN:
      return getDefinitionReturn();

    case CONSTRAINTS:
      return getConstraints();

    case EXAMPLE:
      return getExample();

    case CATEGORY:
      return getCategory();

    case DIFFICULTY:
      return getDifficulty();

    case TIME_LIMIT:
      return getTimeLimit();

    case PUBLISH_DATE:
      return getPublishDate();

    case SCORE_POINT:
      return getScorePoint();

    case NOTE:
      return getNote();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case EXERCISE_ID:
      return isSetExerciseID();
    case TITLE:
      return isSetTitle();
    case STATEMENT:
      return isSetStatement();
    case DEFINITION_CLASS:
      return isSetDefinitionClass();
    case DEFINITION_METHOD:
      return isSetDefinitionMethod();
    case DEFINITION_PARAMS:
      return isSetDefinitionParams();
    case DEFINITION_RETURN:
      return isSetDefinitionReturn();
    case CONSTRAINTS:
      return isSetConstraints();
    case EXAMPLE:
      return isSetExample();
    case CATEGORY:
      return isSetCategory();
    case DIFFICULTY:
      return isSetDifficulty();
    case TIME_LIMIT:
      return isSetTimeLimit();
    case PUBLISH_DATE:
      return isSetPublishDate();
    case SCORE_POINT:
      return isSetScorePoint();
    case NOTE:
      return isSetNote();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RpcExercise)
      return this.equals((RpcExercise)that);
    return false;
  }

  public boolean equals(RpcExercise that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_exerciseID = true;
    boolean that_present_exerciseID = true;
    if (this_present_exerciseID || that_present_exerciseID) {
      if (!(this_present_exerciseID && that_present_exerciseID))
        return false;
      if (this.exerciseID != that.exerciseID)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_statement = true && this.isSetStatement();
    boolean that_present_statement = true && that.isSetStatement();
    if (this_present_statement || that_present_statement) {
      if (!(this_present_statement && that_present_statement))
        return false;
      if (!this.statement.equals(that.statement))
        return false;
    }

    boolean this_present_definitionClass = true && this.isSetDefinitionClass();
    boolean that_present_definitionClass = true && that.isSetDefinitionClass();
    if (this_present_definitionClass || that_present_definitionClass) {
      if (!(this_present_definitionClass && that_present_definitionClass))
        return false;
      if (!this.definitionClass.equals(that.definitionClass))
        return false;
    }

    boolean this_present_definitionMethod = true && this.isSetDefinitionMethod();
    boolean that_present_definitionMethod = true && that.isSetDefinitionMethod();
    if (this_present_definitionMethod || that_present_definitionMethod) {
      if (!(this_present_definitionMethod && that_present_definitionMethod))
        return false;
      if (!this.definitionMethod.equals(that.definitionMethod))
        return false;
    }

    boolean this_present_definitionParams = true && this.isSetDefinitionParams();
    boolean that_present_definitionParams = true && that.isSetDefinitionParams();
    if (this_present_definitionParams || that_present_definitionParams) {
      if (!(this_present_definitionParams && that_present_definitionParams))
        return false;
      if (!this.definitionParams.equals(that.definitionParams))
        return false;
    }

    boolean this_present_definitionReturn = true && this.isSetDefinitionReturn();
    boolean that_present_definitionReturn = true && that.isSetDefinitionReturn();
    if (this_present_definitionReturn || that_present_definitionReturn) {
      if (!(this_present_definitionReturn && that_present_definitionReturn))
        return false;
      if (!this.definitionReturn.equals(that.definitionReturn))
        return false;
    }

    boolean this_present_constraints = true && this.isSetConstraints();
    boolean that_present_constraints = true && that.isSetConstraints();
    if (this_present_constraints || that_present_constraints) {
      if (!(this_present_constraints && that_present_constraints))
        return false;
      if (!this.constraints.equals(that.constraints))
        return false;
    }

    boolean this_present_example = true && this.isSetExample();
    boolean that_present_example = true && that.isSetExample();
    if (this_present_example || that_present_example) {
      if (!(this_present_example && that_present_example))
        return false;
      if (!this.example.equals(that.example))
        return false;
    }

    boolean this_present_category = true;
    boolean that_present_category = true;
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (this.category != that.category)
        return false;
    }

    boolean this_present_difficulty = true;
    boolean that_present_difficulty = true;
    if (this_present_difficulty || that_present_difficulty) {
      if (!(this_present_difficulty && that_present_difficulty))
        return false;
      if (this.difficulty != that.difficulty)
        return false;
    }

    boolean this_present_timeLimit = true;
    boolean that_present_timeLimit = true;
    if (this_present_timeLimit || that_present_timeLimit) {
      if (!(this_present_timeLimit && that_present_timeLimit))
        return false;
      if (this.timeLimit != that.timeLimit)
        return false;
    }

    boolean this_present_publishDate = true;
    boolean that_present_publishDate = true;
    if (this_present_publishDate || that_present_publishDate) {
      if (!(this_present_publishDate && that_present_publishDate))
        return false;
      if (this.publishDate != that.publishDate)
        return false;
    }

    boolean this_present_scorePoint = true;
    boolean that_present_scorePoint = true;
    if (this_present_scorePoint || that_present_scorePoint) {
      if (!(this_present_scorePoint && that_present_scorePoint))
        return false;
      if (this.scorePoint != that.scorePoint)
        return false;
    }

    boolean this_present_note = true && this.isSetNote();
    boolean that_present_note = true && that.isSetNote();
    if (this_present_note || that_present_note) {
      if (!(this_present_note && that_present_note))
        return false;
      if (!this.note.equals(that.note))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + exerciseID;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatement()) ? 131071 : 524287);
    if (isSetStatement())
      hashCode = hashCode * 8191 + statement.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefinitionClass()) ? 131071 : 524287);
    if (isSetDefinitionClass())
      hashCode = hashCode * 8191 + definitionClass.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefinitionMethod()) ? 131071 : 524287);
    if (isSetDefinitionMethod())
      hashCode = hashCode * 8191 + definitionMethod.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefinitionParams()) ? 131071 : 524287);
    if (isSetDefinitionParams())
      hashCode = hashCode * 8191 + definitionParams.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefinitionReturn()) ? 131071 : 524287);
    if (isSetDefinitionReturn())
      hashCode = hashCode * 8191 + definitionReturn.hashCode();

    hashCode = hashCode * 8191 + ((isSetConstraints()) ? 131071 : 524287);
    if (isSetConstraints())
      hashCode = hashCode * 8191 + constraints.hashCode();

    hashCode = hashCode * 8191 + ((isSetExample()) ? 131071 : 524287);
    if (isSetExample())
      hashCode = hashCode * 8191 + example.hashCode();

    hashCode = hashCode * 8191 + category;

    hashCode = hashCode * 8191 + difficulty;

    hashCode = hashCode * 8191 + timeLimit;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(publishDate);

    hashCode = hashCode * 8191 + scorePoint;

    hashCode = hashCode * 8191 + ((isSetNote()) ? 131071 : 524287);
    if (isSetNote())
      hashCode = hashCode * 8191 + note.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RpcExercise other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetExerciseID()).compareTo(other.isSetExerciseID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExerciseID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exerciseID, other.exerciseID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatement()).compareTo(other.isSetStatement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, other.statement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefinitionClass()).compareTo(other.isSetDefinitionClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefinitionClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.definitionClass, other.definitionClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefinitionMethod()).compareTo(other.isSetDefinitionMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefinitionMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.definitionMethod, other.definitionMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefinitionParams()).compareTo(other.isSetDefinitionParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefinitionParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.definitionParams, other.definitionParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefinitionReturn()).compareTo(other.isSetDefinitionReturn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefinitionReturn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.definitionReturn, other.definitionReturn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConstraints()).compareTo(other.isSetConstraints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstraints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constraints, other.constraints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExample()).compareTo(other.isSetExample());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExample()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.example, other.example);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDifficulty()).compareTo(other.isSetDifficulty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDifficulty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.difficulty, other.difficulty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeLimit()).compareTo(other.isSetTimeLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeLimit, other.timeLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPublishDate()).compareTo(other.isSetPublishDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishDate, other.publishDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScorePoint()).compareTo(other.isSetScorePoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScorePoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scorePoint, other.scorePoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNote()).compareTo(other.isSetNote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, other.note);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RpcExercise(");
    boolean first = true;

    sb.append("exerciseID:");
    sb.append(this.exerciseID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statement:");
    if (this.statement == null) {
      sb.append("null");
    } else {
      sb.append(this.statement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("definitionClass:");
    if (this.definitionClass == null) {
      sb.append("null");
    } else {
      sb.append(this.definitionClass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("definitionMethod:");
    if (this.definitionMethod == null) {
      sb.append("null");
    } else {
      sb.append(this.definitionMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("definitionParams:");
    if (this.definitionParams == null) {
      sb.append("null");
    } else {
      sb.append(this.definitionParams);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("definitionReturn:");
    if (this.definitionReturn == null) {
      sb.append("null");
    } else {
      sb.append(this.definitionReturn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("constraints:");
    if (this.constraints == null) {
      sb.append("null");
    } else {
      sb.append(this.constraints);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("example:");
    if (this.example == null) {
      sb.append("null");
    } else {
      sb.append(this.example);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    sb.append(this.category);
    first = false;
    if (!first) sb.append(", ");
    sb.append("difficulty:");
    sb.append(this.difficulty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeLimit:");
    sb.append(this.timeLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("publishDate:");
    sb.append(this.publishDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("scorePoint:");
    sb.append(this.scorePoint);
    first = false;
    if (!first) sb.append(", ");
    sb.append("note:");
    if (this.note == null) {
      sb.append("null");
    } else {
      sb.append(this.note);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RpcExerciseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RpcExerciseStandardScheme getScheme() {
      return new RpcExerciseStandardScheme();
    }
  }

  private static class RpcExerciseStandardScheme extends org.apache.thrift.scheme.StandardScheme<RpcExercise> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RpcExercise struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXERCISE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exerciseID = iprot.readI32();
              struct.setExerciseIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statement = iprot.readString();
              struct.setStatementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEFINITION_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.definitionClass = iprot.readString();
              struct.setDefinitionClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEFINITION_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.definitionMethod = iprot.readString();
              struct.setDefinitionMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEFINITION_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.definitionParams = iprot.readString();
              struct.setDefinitionParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEFINITION_RETURN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.definitionReturn = iprot.readString();
              struct.setDefinitionReturnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONSTRAINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.constraints = iprot.readString();
              struct.setConstraintsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXAMPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.example = iprot.readString();
              struct.setExampleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.category = iprot.readI32();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DIFFICULTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.difficulty = iprot.readI32();
              struct.setDifficultyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TIME_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeLimit = iprot.readI32();
              struct.setTimeLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PUBLISH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.publishDate = iprot.readI64();
              struct.setPublishDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SCORE_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.scorePoint = iprot.readI32();
              struct.setScorePointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.note = iprot.readString();
              struct.setNoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RpcExercise struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EXERCISE_ID_FIELD_DESC);
      oprot.writeI32(struct.exerciseID);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.statement != null) {
        oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
        oprot.writeString(struct.statement);
        oprot.writeFieldEnd();
      }
      if (struct.definitionClass != null) {
        oprot.writeFieldBegin(DEFINITION_CLASS_FIELD_DESC);
        oprot.writeString(struct.definitionClass);
        oprot.writeFieldEnd();
      }
      if (struct.definitionMethod != null) {
        oprot.writeFieldBegin(DEFINITION_METHOD_FIELD_DESC);
        oprot.writeString(struct.definitionMethod);
        oprot.writeFieldEnd();
      }
      if (struct.definitionParams != null) {
        oprot.writeFieldBegin(DEFINITION_PARAMS_FIELD_DESC);
        oprot.writeString(struct.definitionParams);
        oprot.writeFieldEnd();
      }
      if (struct.definitionReturn != null) {
        oprot.writeFieldBegin(DEFINITION_RETURN_FIELD_DESC);
        oprot.writeString(struct.definitionReturn);
        oprot.writeFieldEnd();
      }
      if (struct.constraints != null) {
        oprot.writeFieldBegin(CONSTRAINTS_FIELD_DESC);
        oprot.writeString(struct.constraints);
        oprot.writeFieldEnd();
      }
      if (struct.example != null) {
        oprot.writeFieldBegin(EXAMPLE_FIELD_DESC);
        oprot.writeString(struct.example);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
      oprot.writeI32(struct.category);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIFFICULTY_FIELD_DESC);
      oprot.writeI32(struct.difficulty);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIME_LIMIT_FIELD_DESC);
      oprot.writeI32(struct.timeLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUBLISH_DATE_FIELD_DESC);
      oprot.writeI64(struct.publishDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCORE_POINT_FIELD_DESC);
      oprot.writeI32(struct.scorePoint);
      oprot.writeFieldEnd();
      if (struct.note != null) {
        oprot.writeFieldBegin(NOTE_FIELD_DESC);
        oprot.writeString(struct.note);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RpcExerciseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RpcExerciseTupleScheme getScheme() {
      return new RpcExerciseTupleScheme();
    }
  }

  private static class RpcExerciseTupleScheme extends org.apache.thrift.scheme.TupleScheme<RpcExercise> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RpcExercise struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetExerciseID()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetStatement()) {
        optionals.set(2);
      }
      if (struct.isSetDefinitionClass()) {
        optionals.set(3);
      }
      if (struct.isSetDefinitionMethod()) {
        optionals.set(4);
      }
      if (struct.isSetDefinitionParams()) {
        optionals.set(5);
      }
      if (struct.isSetDefinitionReturn()) {
        optionals.set(6);
      }
      if (struct.isSetConstraints()) {
        optionals.set(7);
      }
      if (struct.isSetExample()) {
        optionals.set(8);
      }
      if (struct.isSetCategory()) {
        optionals.set(9);
      }
      if (struct.isSetDifficulty()) {
        optionals.set(10);
      }
      if (struct.isSetTimeLimit()) {
        optionals.set(11);
      }
      if (struct.isSetPublishDate()) {
        optionals.set(12);
      }
      if (struct.isSetScorePoint()) {
        optionals.set(13);
      }
      if (struct.isSetNote()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetExerciseID()) {
        oprot.writeI32(struct.exerciseID);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetStatement()) {
        oprot.writeString(struct.statement);
      }
      if (struct.isSetDefinitionClass()) {
        oprot.writeString(struct.definitionClass);
      }
      if (struct.isSetDefinitionMethod()) {
        oprot.writeString(struct.definitionMethod);
      }
      if (struct.isSetDefinitionParams()) {
        oprot.writeString(struct.definitionParams);
      }
      if (struct.isSetDefinitionReturn()) {
        oprot.writeString(struct.definitionReturn);
      }
      if (struct.isSetConstraints()) {
        oprot.writeString(struct.constraints);
      }
      if (struct.isSetExample()) {
        oprot.writeString(struct.example);
      }
      if (struct.isSetCategory()) {
        oprot.writeI32(struct.category);
      }
      if (struct.isSetDifficulty()) {
        oprot.writeI32(struct.difficulty);
      }
      if (struct.isSetTimeLimit()) {
        oprot.writeI32(struct.timeLimit);
      }
      if (struct.isSetPublishDate()) {
        oprot.writeI64(struct.publishDate);
      }
      if (struct.isSetScorePoint()) {
        oprot.writeI32(struct.scorePoint);
      }
      if (struct.isSetNote()) {
        oprot.writeString(struct.note);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RpcExercise struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.exerciseID = iprot.readI32();
        struct.setExerciseIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.statement = iprot.readString();
        struct.setStatementIsSet(true);
      }
      if (incoming.get(3)) {
        struct.definitionClass = iprot.readString();
        struct.setDefinitionClassIsSet(true);
      }
      if (incoming.get(4)) {
        struct.definitionMethod = iprot.readString();
        struct.setDefinitionMethodIsSet(true);
      }
      if (incoming.get(5)) {
        struct.definitionParams = iprot.readString();
        struct.setDefinitionParamsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.definitionReturn = iprot.readString();
        struct.setDefinitionReturnIsSet(true);
      }
      if (incoming.get(7)) {
        struct.constraints = iprot.readString();
        struct.setConstraintsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.example = iprot.readString();
        struct.setExampleIsSet(true);
      }
      if (incoming.get(9)) {
        struct.category = iprot.readI32();
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(10)) {
        struct.difficulty = iprot.readI32();
        struct.setDifficultyIsSet(true);
      }
      if (incoming.get(11)) {
        struct.timeLimit = iprot.readI32();
        struct.setTimeLimitIsSet(true);
      }
      if (incoming.get(12)) {
        struct.publishDate = iprot.readI64();
        struct.setPublishDateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.scorePoint = iprot.readI32();
        struct.setScorePointIsSet(true);
      }
      if (incoming.get(14)) {
        struct.note = iprot.readString();
        struct.setNoteIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

